module hand_cricket_game(
    input logic clk,            // Clock input
    input logic reset,          // Reset button
    input logic [2:0] player_run, // Run scored by player (0 to 6)
    input logic btn_play,       // Button press to play
    output logic [7:0] leds,    // LEDs for score display
    output logic out_flag       // Flag when player is out
);

    // Registers
    logic [7:0] total_score;
    logic [2:0] random_run;     // Random run generated by LFSR

    // Simple 3-bit Linear Feedback Shift Register (LFSR) for pseudo-random run generation
    always_ff @(posedge clk or posedge reset) begin
        if (reset)
            random_run <= 3'b101;  // Initial seed for LFSR
        else
            random_run <= {random_run[1:0], random_run[2] ^ random_run[0]};
    end

    // Check for "out" condition
    always_ff @(posedge clk or posedge reset) begin
        if (reset)
            out_flag <= 0;                            // Reset out flag on reset
        else if (btn_play && player_run == random_run)
            out_flag <= 1;                           // Set out flag if player is out
        else if (reset || !btn_play)
            out_flag <= 0;                           // Clear out flag if not playing
    end

    // Score calculation logic, ensuring it only updates when the player is not out
    always_ff @(posedge clk or posedge reset) begin
        if (reset) begin
            total_score <= 8'b0; // Reset score on reset
        end else if (btn_play && !out_flag) begin
            total_score <= total_score + player_run; // Add player run if not out
        end else if (out_flag) begin
            total_score <= 8'b0; // Reset score on out
        end
    end

    // Assign score to LEDs
    assign leds = total_score;

endmodule
